{{- /* vim: set ft=vim : */ -}}
" need to disable this before we actually Plug polygot
let g:polyglot_disabled = ['sensible']

" vim-plug
" we can install plug using this command:
" curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \
" https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin('~/.config/nvim/plugged')

Plug 'gruvbox-community/gruvbox'		" gruvbox color theme
Plug 'vim-airline/vim-airline'	" airline status and bufferlines
Plug 'mhinz/vim-signify'	" VCS differences apear in gutter (along with some basic tools)
Plug 'tpope/vim-fugitive'	" more extensive git support
" Plug 'editorconfig/editorconfig-vim' " editor config is great for collaboration
Plug 'dense-analysis/ale'	" Async Lint Engine
Plug 'Yggdroot/indentLine'	" show levels of indentation
Plug 'sheerun/vim-polyglot'	" extensive language support

{{- if eq .class "personal" }}
" Experimental plugins we aren't ready for at work yet
Plug 'RRethy/vim-hexokinase', {'do': 'make hexokinase'}	" Show color swatches for hex etc.
Plug 'machakann/vim-sandwich'	" sandwich :S
Plug 'junegunn/fzf'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'	" Extensive completion snippets for various langagues
{{- end }}

call plug#end()

" -----------------------------------------------------------------------------
" PLUGIN CONFIG - gruvbox
let g:gruvbox_italic = 1
let g:gruvbox_undercurl = 1
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_contrast_light = 'hard'

" -----------------------------------------------------------------------------
" PLUGIN CONFIG - airline
let g:airline_highlighting_cache = 1		" cache highlighting on redraw
let g:airline#extensions#tabline#enabled = 1	" tabline shows open buffers
let g:airline#extensions#ale#enabled = 1	" use powerline custom delimeters
if $COLORTERM =~? '\vtruecolor'
	let g:airline_powerline_fonts = 1
	let g:airline_skip_empty_sections = 1
endif

" -----------------------------------------------------------------------------
" PLUGIN CONFIG - ale
" let g:ale_fixers = {'typescript': ['prettier', 'tslint', 'tslint']}
" let g:ale_fix_on_save = 1
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '●'
let g:ale_python_auto_pipenv = 1
{{- if eq .class "work" }}
let g:ale_python_pylint_options = '--rcfile .cicd_scripts/static_analysis/config/pylintrc'
let g:ale_python_mypy_options = '--config-file .cicd_scripts/static_analysis/config/mypy.ini'
{{- end }}

" -----------------------------------------------------------------------------
" PLUGIN CONFIG - snippets
let g:UltiSnipsExpandTrigger="<tab>"
" list all snippets for current filetype
let g:UltiSnipsListSnippets="<c-l>"

" -----------------------------------------------------------------------------
" PLUGIN CONFIG - misc
let g:indentLine_char = '▏'
let g:fzf_options = '--preview "pygmentize -O style=gruvbox-dark {}"'

" =============================================================================
" Config Proper
set title			" set the teminal title (useful for identiying open terminals)
"set cursorline			" show line of cursor
set lazyredraw			" only redraw when neccessary
set tags^=.tags,.git/tags	" look for tags file in the .git directory
set scrolloff=9 sidescrolloff=5	" padding for vertical and horizontal scroll
set nowrap			" turn off line wrap
set hidden			" allow hiding buffers (can open a new buffer without writing)
set ignorecase smartcase	" search is only case sensetive if searchstring contains caps
set nohlsearch			" don't highlight search results once locked in
set clipboard=unnamedplus	" yank, delete and put with X11 clipboard (but not primary)

" -----------------------------------------------------------------------------
" place backup files
set directory=./.backup,.,/tmp backupdir=./.backup,.,/tmp	" directories to try for swap/backup files (respectively)
" set nobackup nowb noswapfile					" don't use swapfiles WARNING: this should only be used in conjuction with version control

" -----------------------------------------------------------------------------
" setup 'list' (diplay whitespace)
" set list listchars=tab:>\ ,nbsp:%,trail:~,precedes:<,extends:>
set list listchars=tab:▷\ ,nbsp:␣,trail:•,precedes:◀,extends:▶		" unicode symbols

" -----------------------------------------------------------------------------
" setup wildmenu (filename tab completion)
set path+=**	" search subdirs when using :find
set wildignore+=*.pyc,*/__pycache__/,*~,.git/,.venv/,*_build	" files to ignore from wildmenu

" -----------------------------------------------------------------------------
" setup folding (hiding code sections)
" set foldcolumn=1 foldmethod=syntax			" force showing fold column, fold on syntax
" set foldmarker={,}		"set to fold around {} blocks
set foldmethod=syntax		" fold on syntax

" -----------------------------------------------------------------------------
"  Line Numbering
set number relativenumber	" Hyrbid numbers - current line has number, others are relative
augroup numbertoggle		" Mode switching
	autocmd!
	autocmd TermOpen * setlocal nonumber norelativenumber
	" Hyrbrid numbers - Normal/Visual modes (but only if line numbers are on)
	autocmd BufEnter,FocusGained,InsertLeave * if &number | setlocal relativenumber | endif
	" Absolute numbers - Insert mode/Unfocused
	autocmd BufLeave,FocusLost,InsertEnter   * setlocal norelativenumber
augroup END

" -----------------------------------------------------------------------------
" Colourscheme
" native: torte, ron, elflord
" custom: gruvbox, candycode, jellybeans
set bg=dark
colorscheme gruvbox
if $COLORTERM =~? '\vtruecolor'
	set termguicolors	" truecolor colouring
	let &t_Co = 256
endif

" -----------------------------------------------------------------------------

augroup ftcolorcolumn
	autocmd!
	autocmd FileType gitcommit setlocal colorcolumn=51,73
	autocmd FileType python setlocal colorcolumn=81
augroup END
" autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" -----------------------------------------------------------------------------
" maps using leader
let mapleader = " "
map <silent> <leader>p		:setlocal paste! list! <bar> IndentLinesToggle<CR>
map <silent> <leader>l		:call LightSwitch()<CR>
map <silent> <leader>s		:setlocal spell!<CR>
map <silent> <leader>f		:FZF<CR>

function LightSwitch()
	if &bg ==? 'dark'
		set bg=light
	else
		set bg=dark
	end
	return 0
endfunction

" -----------------------------------------------------------------------------
" 'normal' mode keymaps
nmap <silent> <backspace>	:nohlsearch<CR>

" -----------------------------------------------------------------------------
" terminal mode keymaps
" tnoremap <silent> <esc> <C-\><C-n>

" -----------------------------------------------------------------------------
" command keymaps
" map w!! to hack for write as sudo
cabbrev w!!	w !sudo tee > /dev/null "%"

" -----------------------------------------------------------------------------
" VimClutch
nmap <silent> <F11>	a
vmap <silent> <F11>	c
imap <silent> <F11>	<nop>
imap <silent> <F11>	<nop>
imap <silent> <F12>	<esc>
